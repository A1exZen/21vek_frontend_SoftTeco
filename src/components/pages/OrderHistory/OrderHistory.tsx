import React from 'react';
import styles from './styles.module.scss';
import { useOrderHistory } from '@hooks/useCheckout.ts';

export const OrderHistory: React.FC = () => {
  const { data, isLoading, error } = useOrderHistory();
  console.log('Order history', data);

  const formatDate = (dateString: string): string => {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  };

  if (isLoading) {
    return (
      <div className={styles.container}>
        <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.container}>
        <div className={styles.error}>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤</div>
      </div>
    );
  }

  if (!data?.orders || data.orders.length === 0) {
    return (
      <div className={styles.container}>
        <h1 className={styles.title}>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</h1>
        <div className={styles.emptyState}>
          <div className={styles.emptyIcon}>üì¶</div>
          <div className={styles.emptyTitle}>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</div>
          <div className={styles.emptyText}>
            –ö–æ–≥–¥–∞ –≤—ã —Å–¥–µ–ª–∞–µ—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑, –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</h1>
      <div className={styles.ordersList}>
        {data.orders.map((orderGroup) => (
          <div key={orderGroup.groupId} className={styles.orderGroup}>
            <div className={styles.orderHeader}>
              <div className={styles.orderTitle}>
                –ó–∞–∫–∞–∑ ‚Ññ {orderGroup.groupId}
              </div>
              <div className={styles.orderDate}>{formatDate(orderGroup.dateCreated)}</div>
            </div>

            <div className={styles.orderItems}>
              {orderGroup.orders.map((item) => (
                <div key={item.orderId} className={styles.orderItem}>
                  <div className={styles.itemRow}>
                    <div className={styles.itemName}>{item.productName}</div>
                    <div className={styles.itemPrice}>
                      {item.price * item.count}
                    </div>
                  </div>
                  <div className={styles.itemDetails}>
                    <span>{item.count} —à—Ç</span>
                  </div>
                </div>
              ))}
            </div>

            <div className={styles.orderSummary}>
              <div className={styles.summaryRow}>
                <span className={styles.summaryLabel}>–î–æ—Å—Ç–∞–≤–∫–∞</span>
                <span className={styles.summaryLabel}>
                  –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
                </span>
              </div>
              <div className={`${styles.summaryRow} ${styles.total}`}>
                <span className={styles.summaryLabel}>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ</span>
                <span className={styles.summaryValue}>
                  {orderGroup.processor.totalPrice}
                </span>
              </div>

              {/*<div className={styles.orderInfo}>*/}
              {/*  <div className={styles.infoRow}>*/}
              {/*    <span className={styles.infoLabel}>–°—Ç–∞—Ç—É—Å:</span>*/}
              {/*    <span className={styles.infoValue}>*/}
              {/*      <span className={`${styles.orderStatus}`}>*/}
              {/*        {orderGroup.processor.status}*/}
              {/*      </span>*/}
              {/*    </span>*/}
              {/*  </div>*/}
              {/*  {orderGroup.processor.adress && (*/}
              {/*    <div className={styles.infoRow}>*/}
              {/*      <span className={styles.infoLabel}>–ê–¥—Ä–µ—Å:</span>*/}
              {/*      <span className={styles.infoValue}>*/}
              {/*        {orderGroup.processor.adress}*/}
              {/*      </span>*/}
              {/*    </div>*/}
              {/*  )}*/}
              {/*  {orderGroup.processor.comment && (*/}
              {/*    <div className={styles.infoRow}>*/}
              {/*      <span className={styles.infoLabel}>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</span>*/}
              {/*      <span className={styles.infoValue}>*/}
              {/*        {orderGroup.processor.comment}*/}
              {/*      </span>*/}
              {/*    </div>*/}
              {/*  )}*/}
              {/*</div>*/}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};
